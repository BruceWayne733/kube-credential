{"ast":null,"code":"import axios from 'axios';\nconst ISSUANCE_API_URL = process.env.REACT_APP_ISSUANCE_API_URL || 'http://localhost:3001';\nconst VERIFICATION_API_URL = process.env.REACT_APP_VERIFICATION_API_URL || 'http://localhost:3002';\n\n// Create axios instances for each service\nconst issuanceClient = axios.create({\n  baseURL: ISSUANCE_API_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nconst verificationClient = axios.create({\n  baseURL: VERIFICATION_API_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor for logging\nissuanceClient.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`Issuance API Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`);\n  return config;\n}, error => {\n  console.error('Issuance API Request Error:', error);\n  return Promise.reject(error);\n});\nverificationClient.interceptors.request.use(config => {\n  var _config$method2;\n  console.log(`Verification API Request: ${(_config$method2 = config.method) === null || _config$method2 === void 0 ? void 0 : _config$method2.toUpperCase()} ${config.url}`);\n  return config;\n}, error => {\n  console.error('Verification API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\nconst handleApiError = (error, serviceName) => {\n  console.error(`${serviceName} API Error:`, error);\n  if (error.response) {\n    var _error$response$data;\n    // Server responded with error status\n    throw new Error(((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || `Server error: ${error.response.status}`);\n  } else if (error.request) {\n    // Network error\n    throw new Error(`${serviceName} service is unavailable. Please check if the service is running.`);\n  } else {\n    // Other error\n    throw new Error(error.message || `Unknown error occurred with ${serviceName} service`);\n  }\n};\nexport const credentialService = {\n  // Issue a new credential\n  issueCredential: async request => {\n    try {\n      const response = await issuanceClient.post('/issue', request);\n      return response.data;\n    } catch (error) {\n      handleApiError(error, 'Issuance');\n    }\n  },\n  // Verify a credential\n  verifyCredential: async request => {\n    try {\n      const response = await verificationClient.post('/verify', request);\n      return response.data;\n    } catch (error) {\n      handleApiError(error, 'Verification');\n    }\n  },\n  // Get credential by ID (for debugging)\n  getCredential: async id => {\n    try {\n      const response = await issuanceClient.get(`/credential/${id}`);\n      return response.data;\n    } catch (error) {\n      handleApiError(error, 'Issuance');\n    }\n  },\n  // Get all credentials (for debugging)\n  getAllCredentials: async () => {\n    try {\n      const response = await issuanceClient.get('/credentials');\n      return response.data;\n    } catch (error) {\n      handleApiError(error, 'Issuance');\n    }\n  },\n  // Health check for services\n  checkIssuanceHealth: async () => {\n    try {\n      const response = await issuanceClient.get('/health');\n      return response.data;\n    } catch (error) {\n      throw new Error('Issuance service is not healthy');\n    }\n  },\n  checkVerificationHealth: async () => {\n    try {\n      const response = await verificationClient.get('/health');\n      return response.data;\n    } catch (error) {\n      throw new Error('Verification service is not healthy');\n    }\n  }\n};","map":{"version":3,"names":["axios","ISSUANCE_API_URL","process","env","REACT_APP_ISSUANCE_API_URL","VERIFICATION_API_URL","REACT_APP_VERIFICATION_API_URL","issuanceClient","create","baseURL","timeout","headers","verificationClient","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","_config$method2","handleApiError","serviceName","response","_error$response$data","Error","data","message","status","credentialService","issueCredential","post","verifyCredential","getCredential","id","get","getAllCredentials","checkIssuanceHealth","checkVerificationHealth"],"sources":["C:/Users/Mehul/zupple-assignments/kube-credential/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport {\n  CredentialIssuanceRequest,\n  CredentialIssuanceResponse,\n  CredentialVerificationRequest,\n  CredentialVerificationResponse\n} from '../types';\n\nconst ISSUANCE_API_URL = process.env.REACT_APP_ISSUANCE_API_URL || 'http://localhost:3001';\nconst VERIFICATION_API_URL = process.env.REACT_APP_VERIFICATION_API_URL || 'http://localhost:3002';\n\n// Create axios instances for each service\nconst issuanceClient = axios.create({\n  baseURL: ISSUANCE_API_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nconst verificationClient = axios.create({\n  baseURL: VERIFICATION_API_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor for logging\nissuanceClient.interceptors.request.use(\n  (config) => {\n    console.log(`Issuance API Request: ${config.method?.toUpperCase()} ${config.url}`);\n    return config;\n  },\n  (error) => {\n    console.error('Issuance API Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\nverificationClient.interceptors.request.use(\n  (config) => {\n    console.log(`Verification API Request: ${config.method?.toUpperCase()} ${config.url}`);\n    return config;\n  },\n  (error) => {\n    console.error('Verification API Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling\nconst handleApiError = (error: any, serviceName: string) => {\n  console.error(`${serviceName} API Error:`, error);\n\n  if (error.response) {\n    // Server responded with error status\n    throw new Error(error.response.data?.message || `Server error: ${error.response.status}`);\n  } else if (error.request) {\n    // Network error\n    throw new Error(`${serviceName} service is unavailable. Please check if the service is running.`);\n  } else {\n    // Other error\n    throw new Error(error.message || `Unknown error occurred with ${serviceName} service`);\n  }\n};\n\nexport const credentialService = {\n  // Issue a new credential\n  issueCredential: async (request: CredentialIssuanceRequest): Promise<CredentialIssuanceResponse> => {\n    try {\n      const response = await issuanceClient.post<CredentialIssuanceResponse>('/issue', request);\n      return response.data;\n    } catch (error) {\n      handleApiError(error, 'Issuance');\n    }\n  },\n\n  // Verify a credential\n  verifyCredential: async (request: CredentialVerificationRequest): Promise<CredentialVerificationResponse> => {\n    try {\n      const response = await verificationClient.post<CredentialVerificationResponse>('/verify', request);\n      return response.data;\n    } catch (error) {\n      handleApiError(error, 'Verification');\n    }\n  },\n\n  // Get credential by ID (for debugging)\n  getCredential: async (id: string) => {\n    try {\n      const response = await issuanceClient.get(`/credential/${id}`);\n      return response.data;\n    } catch (error) {\n      handleApiError(error, 'Issuance');\n    }\n  },\n\n  // Get all credentials (for debugging)\n  getAllCredentials: async () => {\n    try {\n      const response = await issuanceClient.get('/credentials');\n      return response.data;\n    } catch (error) {\n      handleApiError(error, 'Issuance');\n    }\n  },\n\n  // Health check for services\n  checkIssuanceHealth: async () => {\n    try {\n      const response = await issuanceClient.get('/health');\n      return response.data;\n    } catch (error) {\n      throw new Error('Issuance service is not healthy');\n    }\n  },\n\n  checkVerificationHealth: async () => {\n    try {\n      const response = await verificationClient.get('/health');\n      return response.data;\n    } catch (error) {\n      throw new Error('Verification service is not healthy');\n    }\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}