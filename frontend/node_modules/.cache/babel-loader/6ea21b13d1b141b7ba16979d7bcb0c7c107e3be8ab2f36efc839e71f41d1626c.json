{"ast":null,"code":"import axios from'axios';const resolveBaseUrl=fallback=>{if(process.env.REACT_APP_ENV==='test')return fallback;if(typeof window!=='undefined'&&window.location&&window.location.origin){return\"\".concat(window.location.origin).concat(fallback);}return fallback;};const ISSUANCE_API_URL=process.env.REACT_APP_ISSUANCE_API_URL||resolveBaseUrl('/api/issuance');const VERIFICATION_API_URL=process.env.REACT_APP_VERIFICATION_API_URL||resolveBaseUrl('/api/verification');// Create axios instances for each service\nconst issuanceClient=axios.create({baseURL:ISSUANCE_API_URL,timeout:10000,headers:{'Content-Type':'application/json'}});const verificationClient=axios.create({baseURL:VERIFICATION_API_URL,timeout:10000,headers:{'Content-Type':'application/json'}});// Request interceptor for logging\nissuanceClient.interceptors.request.use(config=>{var _config$method;console.log(\"Issuance API Request: \".concat((_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase(),\" \").concat(config.url));return config;},error=>{console.error('Issuance API Request Error:',error);return Promise.reject(error);});verificationClient.interceptors.request.use(config=>{var _config$method2;console.log(\"Verification API Request: \".concat((_config$method2=config.method)===null||_config$method2===void 0?void 0:_config$method2.toUpperCase(),\" \").concat(config.url));return config;},error=>{console.error('Verification API Request Error:',error);return Promise.reject(error);});// Response interceptor for error handling\nconst handleApiError=(error,serviceName)=>{console.error(\"\".concat(serviceName,\" API Error:\"),error);if(error.response){var _error$response$data;// Server responded with error status\nthrow new Error(((_error$response$data=error.response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||\"Server error: \".concat(error.response.status));}else if(error.request){// Network error\nthrow new Error(\"\".concat(serviceName,\" service is unavailable. Please check if the service is running.\"));}else{// Other error\nthrow new Error(error.message||\"Unknown error occurred with \".concat(serviceName,\" service\"));}};export const credentialService={// Issue a new credential\nissueCredential:async request=>{try{const response=await issuanceClient.post('/issue',request);return response.data;}catch(error){handleApiError(error,'Issuance');throw error;}},// Verify a credential\nverifyCredential:async request=>{try{const response=await verificationClient.post('/verify',request);return response.data;}catch(error){handleApiError(error,'Verification');throw error;}},// Get credential by ID (for debugging)\ngetCredential:async id=>{try{const response=await issuanceClient.get(\"/credential/\".concat(id));return response.data;}catch(error){handleApiError(error,'Issuance');}},// Get all credentials (for debugging)\ngetAllCredentials:async()=>{try{const response=await issuanceClient.get('/credentials');return response.data;}catch(error){handleApiError(error,'Issuance');}},// Health check for services\ncheckIssuanceHealth:async()=>{try{const response=await issuanceClient.get('/health');return response.data;}catch(error){throw new Error('Issuance service is not healthy');}},checkVerificationHealth:async()=>{try{const response=await verificationClient.get('/health');return response.data;}catch(error){throw new Error('Verification service is not healthy');}}};","map":{"version":3,"names":["axios","resolveBaseUrl","fallback","process","env","REACT_APP_ENV","window","location","origin","concat","ISSUANCE_API_URL","REACT_APP_ISSUANCE_API_URL","VERIFICATION_API_URL","REACT_APP_VERIFICATION_API_URL","issuanceClient","create","baseURL","timeout","headers","verificationClient","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","_config$method2","handleApiError","serviceName","response","_error$response$data","Error","data","message","status","credentialService","issueCredential","post","verifyCredential","getCredential","id","get","getAllCredentials","checkIssuanceHealth","checkVerificationHealth"],"sources":["C:/Users/Mehul/zupple-assignments/kube-credential/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport {\n  CredentialIssuanceRequest,\n  CredentialIssuanceResponse,\n  CredentialVerificationRequest,\n  CredentialVerificationResponse\n} from '../types';\n\nconst resolveBaseUrl = (fallback: string) => {\n  if (process.env.REACT_APP_ENV === 'test') return fallback;\n  if (typeof window !== 'undefined' && window.location && window.location.origin) {\n    return `${window.location.origin}${fallback}`;\n  }\n  return fallback;\n};\n\nconst ISSUANCE_API_URL = process.env.REACT_APP_ISSUANCE_API_URL || resolveBaseUrl('/api/issuance');\nconst VERIFICATION_API_URL = process.env.REACT_APP_VERIFICATION_API_URL || resolveBaseUrl('/api/verification');\n\n// Create axios instances for each service\nconst issuanceClient = axios.create({\n  baseURL: ISSUANCE_API_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nconst verificationClient = axios.create({\n  baseURL: VERIFICATION_API_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor for logging\nissuanceClient.interceptors.request.use(\n  (config) => {\n    console.log(`Issuance API Request: ${config.method?.toUpperCase()} ${config.url}`);\n    return config;\n  },\n  (error) => {\n    console.error('Issuance API Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\nverificationClient.interceptors.request.use(\n  (config) => {\n    console.log(`Verification API Request: ${config.method?.toUpperCase()} ${config.url}`);\n    return config;\n  },\n  (error) => {\n    console.error('Verification API Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling\nconst handleApiError = (error: any, serviceName: string) => {\n  console.error(`${serviceName} API Error:`, error);\n\n  if (error.response) {\n    // Server responded with error status\n    throw new Error(error.response.data?.message || `Server error: ${error.response.status}`);\n  } else if (error.request) {\n    // Network error\n    throw new Error(`${serviceName} service is unavailable. Please check if the service is running.`);\n  } else {\n    // Other error\n    throw new Error(error.message || `Unknown error occurred with ${serviceName} service`);\n  }\n};\n\nexport const credentialService = {\n  // Issue a new credential\n  issueCredential: async (request: CredentialIssuanceRequest): Promise<CredentialIssuanceResponse> => {\n    try {\n      const response = await issuanceClient.post<CredentialIssuanceResponse>('/issue', request);\n      return response.data;\n    } catch (error) {\n      handleApiError(error, 'Issuance');\n      throw error;\n    }\n  },\n\n  // Verify a credential\n  verifyCredential: async (request: CredentialVerificationRequest): Promise<CredentialVerificationResponse> => {\n    try {\n      const response = await verificationClient.post<CredentialVerificationResponse>('/verify', request);\n      return response.data;\n    } catch (error) {\n      handleApiError(error, 'Verification');\n      throw error;\n    }\n  },\n\n  // Get credential by ID (for debugging)\n  getCredential: async (id: string) => {\n    try {\n      const response = await issuanceClient.get(`/credential/${id}`);\n      return response.data;\n    } catch (error) {\n      handleApiError(error, 'Issuance');\n    }\n  },\n\n  // Get all credentials (for debugging)\n  getAllCredentials: async () => {\n    try {\n      const response = await issuanceClient.get('/credentials');\n      return response.data;\n    } catch (error) {\n      handleApiError(error, 'Issuance');\n    }\n  },\n\n  // Health check for services\n  checkIssuanceHealth: async () => {\n    try {\n      const response = await issuanceClient.get('/health');\n      return response.data;\n    } catch (error) {\n      throw new Error('Issuance service is not healthy');\n    }\n  },\n\n  checkVerificationHealth: async () => {\n    try {\n      const response = await verificationClient.get('/health');\n      return response.data;\n    } catch (error) {\n      throw new Error('Verification service is not healthy');\n    }\n  }\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAQzB,KAAM,CAAAC,cAAc,CAAIC,QAAgB,EAAK,CAC3C,GAAIC,OAAO,CAACC,GAAG,CAACC,aAAa,GAAK,MAAM,CAAE,MAAO,CAAAH,QAAQ,CACzD,GAAI,MAAO,CAAAI,MAAM,GAAK,WAAW,EAAIA,MAAM,CAACC,QAAQ,EAAID,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAE,CAC9E,SAAAC,MAAA,CAAUH,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAAC,MAAA,CAAGP,QAAQ,EAC7C,CACA,MAAO,CAAAA,QAAQ,CACjB,CAAC,CAED,KAAM,CAAAQ,gBAAgB,CAAGP,OAAO,CAACC,GAAG,CAACO,0BAA0B,EAAIV,cAAc,CAAC,eAAe,CAAC,CAClG,KAAM,CAAAW,oBAAoB,CAAGT,OAAO,CAACC,GAAG,CAACS,8BAA8B,EAAIZ,cAAc,CAAC,mBAAmB,CAAC,CAE9G;AACA,KAAM,CAAAa,cAAc,CAAGd,KAAK,CAACe,MAAM,CAAC,CAClCC,OAAO,CAAEN,gBAAgB,CACzBO,OAAO,CAAE,KAAK,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF,KAAM,CAAAC,kBAAkB,CAAGnB,KAAK,CAACe,MAAM,CAAC,CACtCC,OAAO,CAAEJ,oBAAoB,CAC7BK,OAAO,CAAE,KAAK,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF;AACAJ,cAAc,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CACpCC,MAAM,EAAK,KAAAC,cAAA,CACVC,OAAO,CAACC,GAAG,0BAAAjB,MAAA,EAAAe,cAAA,CAA0BD,MAAM,CAACI,MAAM,UAAAH,cAAA,iBAAbA,cAAA,CAAeI,WAAW,CAAC,CAAC,MAAAnB,MAAA,CAAIc,MAAM,CAACM,GAAG,CAAE,CAAC,CAClF,MAAO,CAAAN,MAAM,CACf,CAAC,CACAO,KAAK,EAAK,CACTL,OAAO,CAACK,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACnD,MAAO,CAAAC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAC9B,CACF,CAAC,CAEDX,kBAAkB,CAACC,YAAY,CAACC,OAAO,CAACC,GAAG,CACxCC,MAAM,EAAK,KAAAU,eAAA,CACVR,OAAO,CAACC,GAAG,8BAAAjB,MAAA,EAAAwB,eAAA,CAA8BV,MAAM,CAACI,MAAM,UAAAM,eAAA,iBAAbA,eAAA,CAAeL,WAAW,CAAC,CAAC,MAAAnB,MAAA,CAAIc,MAAM,CAACM,GAAG,CAAE,CAAC,CACtF,MAAO,CAAAN,MAAM,CACf,CAAC,CACAO,KAAK,EAAK,CACTL,OAAO,CAACK,KAAK,CAAC,iCAAiC,CAAEA,KAAK,CAAC,CACvD,MAAO,CAAAC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAC9B,CACF,CAAC,CAED;AACA,KAAM,CAAAI,cAAc,CAAGA,CAACJ,KAAU,CAAEK,WAAmB,GAAK,CAC1DV,OAAO,CAACK,KAAK,IAAArB,MAAA,CAAI0B,WAAW,gBAAeL,KAAK,CAAC,CAEjD,GAAIA,KAAK,CAACM,QAAQ,CAAE,KAAAC,oBAAA,CAClB;AACA,KAAM,IAAI,CAAAC,KAAK,CAAC,EAAAD,oBAAA,CAAAP,KAAK,CAACM,QAAQ,CAACG,IAAI,UAAAF,oBAAA,iBAAnBA,oBAAA,CAAqBG,OAAO,oBAAA/B,MAAA,CAAqBqB,KAAK,CAACM,QAAQ,CAACK,MAAM,CAAE,CAAC,CAC3F,CAAC,IAAM,IAAIX,KAAK,CAACT,OAAO,CAAE,CACxB;AACA,KAAM,IAAI,CAAAiB,KAAK,IAAA7B,MAAA,CAAI0B,WAAW,oEAAkE,CAAC,CACnG,CAAC,IAAM,CACL;AACA,KAAM,IAAI,CAAAG,KAAK,CAACR,KAAK,CAACU,OAAO,iCAAA/B,MAAA,CAAmC0B,WAAW,YAAU,CAAC,CACxF,CACF,CAAC,CAED,MAAO,MAAM,CAAAO,iBAAiB,CAAG,CAC/B;AACAC,eAAe,CAAE,KAAO,CAAAtB,OAAkC,EAA0C,CAClG,GAAI,CACF,KAAM,CAAAe,QAAQ,CAAG,KAAM,CAAAtB,cAAc,CAAC8B,IAAI,CAA6B,QAAQ,CAAEvB,OAAO,CAAC,CACzF,MAAO,CAAAe,QAAQ,CAACG,IAAI,CACtB,CAAE,MAAOT,KAAK,CAAE,CACdI,cAAc,CAACJ,KAAK,CAAE,UAAU,CAAC,CACjC,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACAe,gBAAgB,CAAE,KAAO,CAAAxB,OAAsC,EAA8C,CAC3G,GAAI,CACF,KAAM,CAAAe,QAAQ,CAAG,KAAM,CAAAjB,kBAAkB,CAACyB,IAAI,CAAiC,SAAS,CAAEvB,OAAO,CAAC,CAClG,MAAO,CAAAe,QAAQ,CAACG,IAAI,CACtB,CAAE,MAAOT,KAAK,CAAE,CACdI,cAAc,CAACJ,KAAK,CAAE,cAAc,CAAC,CACrC,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACAgB,aAAa,CAAE,KAAO,CAAAC,EAAU,EAAK,CACnC,GAAI,CACF,KAAM,CAAAX,QAAQ,CAAG,KAAM,CAAAtB,cAAc,CAACkC,GAAG,gBAAAvC,MAAA,CAAgBsC,EAAE,CAAE,CAAC,CAC9D,MAAO,CAAAX,QAAQ,CAACG,IAAI,CACtB,CAAE,MAAOT,KAAK,CAAE,CACdI,cAAc,CAACJ,KAAK,CAAE,UAAU,CAAC,CACnC,CACF,CAAC,CAED;AACAmB,iBAAiB,CAAE,KAAAA,CAAA,GAAY,CAC7B,GAAI,CACF,KAAM,CAAAb,QAAQ,CAAG,KAAM,CAAAtB,cAAc,CAACkC,GAAG,CAAC,cAAc,CAAC,CACzD,MAAO,CAAAZ,QAAQ,CAACG,IAAI,CACtB,CAAE,MAAOT,KAAK,CAAE,CACdI,cAAc,CAACJ,KAAK,CAAE,UAAU,CAAC,CACnC,CACF,CAAC,CAED;AACAoB,mBAAmB,CAAE,KAAAA,CAAA,GAAY,CAC/B,GAAI,CACF,KAAM,CAAAd,QAAQ,CAAG,KAAM,CAAAtB,cAAc,CAACkC,GAAG,CAAC,SAAS,CAAC,CACpD,MAAO,CAAAZ,QAAQ,CAACG,IAAI,CACtB,CAAE,MAAOT,KAAK,CAAE,CACd,KAAM,IAAI,CAAAQ,KAAK,CAAC,iCAAiC,CAAC,CACpD,CACF,CAAC,CAEDa,uBAAuB,CAAE,KAAAA,CAAA,GAAY,CACnC,GAAI,CACF,KAAM,CAAAf,QAAQ,CAAG,KAAM,CAAAjB,kBAAkB,CAAC6B,GAAG,CAAC,SAAS,CAAC,CACxD,MAAO,CAAAZ,QAAQ,CAACG,IAAI,CACtB,CAAE,MAAOT,KAAK,CAAE,CACd,KAAM,IAAI,CAAAQ,KAAK,CAAC,qCAAqC,CAAC,CACxD,CACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}